Problem 4:
	
	a) O(n) because n + 1 represents the what happens when you resize, because you must copy and put in the new variable. So technically the runtime of filling up over again you add nine so its n + 10. Because you increase by 10 each time you run this, you take the average which is (n + 10) / 10. This simplifies to O(n).

	b) O(n^(1/2)) because the runtime for filling each insertion is n(the original) + sqrt(n) (which is the amount you added). So to fill those new resize, you have n + n^(1/2). But since we only fill about n^(1/2), we take the average which results in (n + n^(1/2))/(n^(1/2)) which yields O(n^(1/2))

	c) O(n) because assuming you have an array of 100, and you are currently at 50. Popping would yield a runtime of n - 1 because you need to resize into a new array. Pushing back into the array would make it 50, so popping again would get n + 2 is the new resizing. Consiering we made about 3 different insertions, we combine (n - 1 + n + 2)/ 3 = O(n).

	d) The runtime is  O(1) because push and pop when you push, your runtime (n + 1) and when you decrease, your runtime is (n/4 - 1). Also adding in the traversing that needs to be done, to go between resizing is (3/4)n. So taking the average ((n + 1) + (n/4 - 1) + 3n/4) / 3n/4  which yields O(1).